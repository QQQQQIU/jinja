
## 概念解释  

### 什么是模板  

- **模板**其实是一个包含响应文本的文件，其中用**占位符（变量）** 表示动态部分，告诉模板引擎其具体的值需要从使用的数据中获取
- 使用真实值替换变量，再返回最终得到的字符串，这个过程称为 **“渲染”**
- 	Flask便是使用Jinja2这个模板引擎来渲染模板
  
### 使用模板的好处
- 模板在Python的web开发中广泛使用，它能够有效的将**业务逻辑**和**页面逻辑**分开，使代码可读性增强、并且更加容易理解和维护。
- 视图函数只负责业务逻辑和数据处理（业务逻辑方面）
- 而模板则取到视图函数的数据结果进行展示（视图展示方面）
- 代码结构清晰，耦合度低

### 同类比较——string
python中自带一个简单的模板，就是string提供的。
```python
>>>import string
>>> a  =  string.Template( '$who is $role' )
>>> a.substitute(who = 'daxin' ,role = 'Linux' )
'daxin is Linux'
>>> a.substitute(who = 'daxin' ,role = 'cat' )
'daxin is cat'
```
Python自带的模板功能极其有限，如果我们想要在模板中使用控制语句，表达式以及继承等功能的话，就无法实现了。

目前主流的模板系统，最常用的就是jinja2和mako。

### Jinja简介
- Jinja2是python中一个被广泛应用的模板引擎，是由python实现的**模板语言**。他的实际思想来源于Django的模板引擎，并扩展了其语法和一系列强大的功能，是Flask内置的模板语言。由于其灵活，快速和安全等优点被广泛使用。
- Jinja本质上是嵌入到html里的，我们使用jinja，但创作的还是html文件，只不过flask等架构会把它里面嵌入的jinja语句转化为对应的html，相当于动态页面。
> 模板语言：是一种被设计来自动生成文档的简单文本格式。在模板语言中，一般都会把一些变量传给模板替换模板的特定位置上预先定义好的占位变量名。
### Jinja2的优点
- 相对于Template，jinja2更加灵活，它提供了控制结构，表达式和继承等。
- 相对于Mako，jinja2仅有控制结构，不允许在模板中编写太多的业务逻辑。
- 相对于Django模板，jinja2性能更好。
- Jinja2模板的可读性很棒。
### 渲染模板函数
- Flask提供的render_template函数封装了该模板引擎
- render_template函数的第一个参数是模板的文件名，后面的参数都是键值对，表示模板中变量对应的真实值

